$namespace=CocoRCore.Samples.CodeLens

COMPILER CodeLens

IGNORECASE

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  umlaut = "ÄÖÜäöüß".
  germanletter = letter + umlaut.
  underscore = '_'.
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.
  stringCh  = ANY - '"' - cr - lf.
  anybutbrace = ANY - '}'.
  anybutbracket = ANY - ')'.
  dothash = ".#".

TOKENS
  ident = germanletter { germanletter | digit | underscore }.
  dottedident = germanletter { germanletter | digit | underscore } CONTEXT(".") .
  number = ['-'] digit { digit } '.' digit { digit } ['#' | 'R'].
  int = ['-'] digit { digit }.
  string = '"' { stringCh } '"'.
  braced = '{' { anybutbrace  } '}'.
  bracketed = '(' { anybutbracket  } ')'.
  end = "End".
  dot = '.'.
  bar = '|'.
  colon = ':'.
  versionnumber = digit '.' digit '.' digit '.' digit .
  // css = dothash letter { letter | digit | underscore }.  // fights with DottedIdent
  
  // ident tokens :
  version : ident = "version".
  search : ident  = "search".
  select : ident = "select" .
  details : ident  = "details" .
  edit : ident  = "edit" .
  clear : ident  = "clear" .
  keys : ident = "Keys".
  displayname : ident = "Displayname".
  vbident : ident = '[' germanletter { germanletter | digit | underscore } ']'.
  

COMMENTS FROM "'" TO lf 

IGNORE cr + lf + tab


SYMBOLTABLES
	types.
	enumtypes.


PRODUCTIONS

CodeLens =
	Version
	Namespace
	[ ReaderWriterPrefix ]
	RootClass
	{ Class
	| SubSystem
	| Enum
	| Flags
	} 
	EndNamespace
	.	

Version =
	version
	versionnumber 
	.

Namespace = 
	SYNC
	"Namespace" 
	DottedIdent
	.
	
EndNamespace =
	end
	"Namespace"
	.

DottedIdent = 
	[ dottedident dot { dottedident dot } ] ident 
	.

ReaderWriterPrefix = 
	SYNC
	"ReaderWriterPrefix"
	ident
	.

RootClass =
	SYNC
	"RootClass"
	"Data" 
	Properties
	end "Class"
	.
	
Class =
	SYNC
	"Class"
	ident>types 
	[ Title ]
	[ Inherits]
	[ Via ]
	Properties
	end "Class"
	.

Via =
	"Via"
	DottedIdent
	.
	
Title =
	braced
	.
	
Inherits =
	"Inherits"
	DottedIdent
	.
	
DELETEABLE
Properties =
	{ Prop	}
	.

Prop =
	SYNC
	( Property
	| InfoProperty
	| APProperty
	| List
	| SelectList
	| FlagsList
	| LongProperty
	| InfoLongProperty
	)
	.

Property =
	"Property"      
	ident           
	Type
	.

InfoProperty =
	"InfoProperty"   
	ident            
	Type
	.

APProperty =
	"APProperty" 	
	ident           
	Type
	.

List =
	"List"          
	ident           
	[ As ]
	.

SelectList =
	"SelectList"
	ident
	As
	.

FlagsList =
	"FlagsList"
	ident
	Mimics
	.

LongProperty =
	"LongProperty"
	ident
	.

InfoLongProperty =
	"InfoLongProperty"
	ident             
	.

DELETEABLE
Type =
	( As
	| Mimics
	| (. /*empty*/ .)
	)
	[ "=" InitValue ]
	[ SampleValue ]
	.

InitValue+ =
	number 
	| int 
	| string
	| "true"
	| "false"
	| "#" { ANY } "#"  // a VB date literal e.g #12/31/2017#
	| FunctionCall
	.

FunctionCall =
	DottedIdent bracketed
	.

SampleValue =
	braced
	.
	
As =
	"As"
	( BaseType
	| ident:types
	| DottedIdent
	)
	.

BaseType =
	"double"
	| "date"
	| "datetime"
	| "integer"
	| "percent"
	| "percentwithdefault"
	| "doublewithdefault"
	| "integerwithdefault"
	| "n2"
	| "n0"
	| "String"
	| "boolean"
	| "Guid"
	| "String()"
	| "XML"
	.

Mimics =
	"Mimics"
	( MimicsSpec
	| ident:enumtypes
	)
	.

MimicsSpec+ =
	(
	Query
	| Txt
	| XL
	| Ref
	).

Query =
	"query" colon
	dottedident	dot
	ident
	colon
	StringOrIdent
	.

Txt =
	"txt" colon
	dottedident	dot
	ident
	colon
	StringOrIdent
	.

XL =
	"xl" colon
	dottedident	dot
	ident
	colon
	StringOrIdent
	.

Ref =
	"ref" colon
	( keys 
	| displayname 
	)
	colon
	StringOrIdent
	.

StringOrIdent =
	string
	| DottedIdent
	.
	
	
SubSystem = 
	SYNC
	"SubSystem" 
	ident>types
	"SSName" ident
	"SSConfig" ident
	"SSTyp" ident
	"SSCommands" SSCommands
	[ "SSKey" string ]
	[ "SSClear" string  ] 
	{ InfoProperty }
	end "SubSystem"
	.

SSCommands = 
	SSCommand 
	{ bar SSCommand }
	.
	
SSCommand = 
	"search" 
	| "select" 
	| "details" 
	| "edit" 
	| "clear"
	.

Flags =
	SYNC
	"Flags"
	ident>types 
	{ EnumValue }
	end "Flags"
	.

Enum =
	SYNC
	"Enum" 
	ident>enumtypes 
	EnumValues
	end "Enum"
	.

EnumValues =
	{ EnumValue }
	"DEFAULT" EnumValue
	{ EnumValue }
	.

EnumValue = 
	ident
	[ EnumIntValue ]
	.

EnumIntValue =
	"="
	int
	.

END CodeLens .