-->begin
using System;
using System.IO;
using System.Collections.Generic;
using CocoRCore;

-->namespace



	//-----------------------------------------------------------------------------------
	// Scanner
	//-----------------------------------------------------------------------------------
	public class Scanner : ScannerBase
	{
-->declarations

		private static readonly Dictionary<int, int> start = new Dictionary<int, int>(); // maps first token character to start state
		static Scanner() 
		{
-->staticinitialization
		}
	
		private Scanner()
		{
-->initialization
		}
		
		public static Scanner Create(string fileName)
		{
			return Create(fileName, false);
		}

		public static Scanner Create(string fileName, bool isBOMFreeUTF8)
		{
			var s = new Scanner();
			s.Initialize(fileName, isBOMFreeUTF8);
			return s;
		}

		public static Scanner Create(Stream st)
		{
			return Create(st, false);
		}

		public static Scanner Create(Stream st, bool isBOMFreeUTF8)
		{
			var s = new Scanner();
			s.Initialize(st, isBOMFreeUTF8);
			return s;
		}
		
		protected override int maxT => _maxT;
		
-->comments

		protected override void CheckLiteral() 
		{
			// t.val is already lowercase if the scanner is ignorecase
			switch (t.val) {
-->literals
			}
		}

		protected override Token NextToken() 
		{
			while (ch == ' ' ||
-->scan1
			) 
				NextCh();
-->scan2
			var recKind = noSym;
			var recEnd = pos;
			t = new Token.Builder() { position = CurrentPosition() };
			start.TryGetValue(ch, out var state); // state = 0 if not found; state = -1 if EOF;
			tval.Clear(); AddCh();
			
			switch (state) 
			{
				case -1: 
					t.kind = _EOF;
					break;
					// NextCh already done
				case 0: 
					if (recKind != noSym) 
					{
						tval.Length = recEnd - t.position.pos; // TODO: suspicious .pos -> .charPos?
						SetScannerBehindT();
					}
					t.kind = recKind; break;
					// NextCh already done
-->scan3
			}
			t.setValue(tval.ToString(), casingString);
			return t.Freeze(lastPosition);
		}
		
	} // end Scanner

