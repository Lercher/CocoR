/*-------------------------------------------------------------------------
  Coco.ATG -- Attributed Grammar
  Compiler Generator Coco/R,
  Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
  extended by M. Loeberbauer & A. Woess, Univ. of Linz
  with improvements by Pat Terry, Rhodes University

  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 2, or (at your option) any
  later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  As an exception, it is allowed to write an extension of Coco/R that is
  used as a plugin in non-free software.

  If not otherwise stated, any source code generated by Coco/R (other than
  Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
  compile with:
    Coco Coco.ATG -namespace at.jku.ssw.Coco
-------------------------------------------------------------------------*/
$namespace=at.jku.ssw.Coco

COMPILER Coco

Private Const   id          As Integer =  0
Private Const   str         As Integer =  1
' other Coco objects referenced in this ATG
'Public          trace       As TextWriter
'Public          tab         As Tab
Public          dfa         As DFA
Public          pgen        As ParserGen
Private         genScanner  As Boolean
Private         tokenString As String               ' used in declarations of literal tokens
Private         noString    As String = "-none-"    ' used in declarations of literal tokens

Private         mTrace      As TextWriter
Private         mTab        As Tab
Private         mName       As String

Public Property trace() As TextWriter
	Get
		Return mTrace
	End Get
	Set(ByVal tw As TextWriter)
		mTrace = tw
	End Set
End Property

Public Property tab() As Tab
	Get
		Return mTab
	End Get
	Set(ByVal t As Tab)
		mTab = t
	End Set
End Property

Public Property name() As String
	Get
		Return mName
	End Get
	Set(ByVal s As String)
		mName = s
	End Set
End Property

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable = '\u0020' .. '\u007e'.
  hex       = "0123456789abcdef".

TOKENS
  ident     = letter { letter | digit }.
  number    = digit { digit }.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).
  char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
  ddtSym    = '$' { digit | letter }.                                           (. tab.SetDDT(la.val) .)
  optionSym = '$' letter { letter } '=' { digit
                                        | letter
                                        | '-'
                                        | '.'
                                        | ':'
                                        }.                                      (. tab.SetOption(la.val) .)

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------------------------------------------------*/

  Coco                                                                          (. Dim sym      As Symbol
                                                                                   Dim g        As Graph   = Nothing
                                                                                   Dim g1       As Graph   = Nothing
                                                                                   Dim g2       As Graph   = Nothing
                                                                                   Dim gramName As String
                                                                                   Dim s        As CharSet = Nothing
                                                                                   Dim beg      As Integer
                                                                                   Dim line     As Integer .)
  =
    [ "Imports"                                                                 (. beg  = t.pos
                                                                                   line = t.line .)
      { ANY }                                                                   (. pgen.importPos = New Position(beg, la.pos, 0, line) .)
    ]
    "COMPILER"                                                                  (. genScanner  = True
                                                                                   tab.ignored = New CharSet() .)
    ident                                                                       (. gramName = t.val
                                                                                   beg      = la.pos
                                                                                   line     = la.line .)
    { ANY }                                                                     (. tab.semDeclPos = New Position(beg, la.pos, 0, line) .)
    [ "IGNORECASE"                                                              (. dfa.ignoreCase = True ' pdt .)
    ]
    [ "CHARACTERS" { SetDecl } ]
    [ "TOKENS"  { TokenDecl<Node.t> } ]
    [ "PRAGMAS" { TokenDecl<Node.pr> } ]
    { "COMMENTS"                                                                (. Dim nested As Boolean = False .)
      "FROM" TokenExpr<g1>
      "TO" TokenExpr<g2>
      [ "NESTED"                                                                (. nested = True .)
      ]                                                                         (. dfa.NewComment(g1.l, g2.l, nested) .)
    }
    { "IGNORE" Set<s>                                                           (. tab.ignored.[Or](s) .)
    }
    SYNC
    "PRODUCTIONS"                                                               (. If genScanner Then
                                                                                   	dfa.MakeDeterministic()
                                                                                   End If
                                                                                   tab.DeleteNodes() .)
    { ident                                                                     (. sym = tab.FindSym(t.val)
                                                                                   Dim undef As Boolean = sym Is Nothing
                                                                                   If undef Then
                                                                                   	sym = tab.NewSym(Node.nt, t.val, t.line)
                                                                                   Else
                                                                                   	If sym.typ = Node.nt Then
                                                                                   		If sym.graph IsNot Nothing Then
                                                                                   			SemErr("name declared twice")
                                                                                   		End If
                                                                                   	Else
                                                                                   		SemErr("this symbol kind not allowed on left side of production")
                                                                                   	End If
                                                                                   	sym.line = t.line
                                                                                   End If
                                                                                   Dim noAttrs As Boolean = sym.attrPos Is Nothing
                                                                                   sym.attrPos = Nothing .)
      [ AttrDecl<sym> ]                                                         (. If Not undef Then
                                                                                   	If noAttrs <> (sym.attrPos Is Nothing) Then
                                                                                   		SemErr("attribute mismatch between declaration and use of this symbol")
                                                                                   	End If
                                                                                   End If .)
      [ SemText<sym.semPos> ]
      WEAK '='
      Expression<g>                                                             (. sym.graph = g.l
                                                                                   tab.Finish(g) .)
      WEAK '.'
    }
    "END" ident                                                                 (. If gramName <> t.val Then
                                                                                   	SemErr("name does not match grammar name")
                                                                                   End If
                                                                                   tab.gramSy = tab.FindSym(gramName)
                                                                                   If tab.gramSy Is Nothing Then
                                                                                   	SemErr("missing production for grammar name")
                                                                                   Else
                                                                                   	sym = tab.gramSy
                                                                                   	If sym.attrPos IsNot Nothing Then
                                                                                   		SemErr("grammar symbol must not have attributes")
                                                                                   	End If
                                                                                   End If
                                                                                   tab.noSym = tab.NewSym(Node.t, "???", 0) ' noSym gets highest number
                                                                                   tab.SetupAnys()
                                                                                   tab.RenumberPragmas()
                                                                                   If tab.ddt(2) Then
                                                                                   	tab.PrintNodes()
                                                                                   End If
                                                                                   If errors.count = 0 Then
                                                                                   	Console.WriteLine("checking")
                                                                                   	tab.CompSymbolSets()
                                                                                   	If tab.ddt(7) Then
                                                                                   		tab.XRef()
                                                                                   	End If
                                                                                   	If tab.GrammarOk() Then
                                                                                   		Console.Write("parser")
                                                                                   		pgen.WriteParser()
                                                                                   		If genScanner Then
                                                                                   			Console.Write(" + scanner")
                                                                                   			dfa.WriteScanner()
                                                                                   			If tab.ddt(0) Then
                                                                                   				dfa.PrintStates()
                                                                                   			End If
                                                                                   		End If
                                                                                   		Console.WriteLine(" generated")
                                                                                   		If tab.ddt(8) Then
                                                                                   			pgen.WriteStatistics()
                                                                                   		End If
                                                                                   	End If
                                                                                   End If
                                                                                   If tab.ddt(6) Then
                                                                                   	tab.PrintSymbolTable()
                                                                                   End If .)
    '.'
  .

/*----------------------------------------------------------------------------*/

  SetDecl                                                                       (. Dim s As CharSet = Nothing .)
  =
    ident                                                                       (. Dim name As String = t.val
                                                                                   Dim c As CharClass = tab.FindCharClass(name)
                                                                                   If c IsNot Nothing Then
                                                                                   	SemErr("name declared twice")
                                                                                   End If .)
    '=' Set<s>                                                                  (. If s.Elements() = 0 Then
                                                                                   	SemErr("character set must not be empty")
                                                                                   End If
                                                                                   tab.NewCharClass(name, s) .)
    '.'
  .

/*----------------------------------------------------------------------------*/

  Set<ByRef s As CharSet>                                                       (. Dim s2 As CharSet = Nothing .)
  =
    SimSet<s>
    { '+' SimSet<s2>                                                            (. s.[Or](s2) .)
    | '-' SimSet<s2>                                                            (. s.Subtract(s2) .)
    }
  .

/*----------------------------------------------------------------------------*/

  SimSet<ByRef s As CharSet>                                                    (. Dim n1 As Integer
                                                                                   Dim n2 As Integer .)
  =                                                                             (. s = New CharSet() .)
  ( ident                                                                       (. Dim c As CharClass = tab.FindCharClass(t.val)
                                                                                   If c Is Nothing Then
                                                                                   	SemErr("undefined name")
                                                                                   Else
                                                                                   	s.[Or](c.[set])
                                                                                   End If .)
  | string                                                                      (. Dim name As String = t.val
                                                                                   name = tab.Unescape(name.Substring(1, name.Length - 2))
                                                                                   For Each ch As Char In name
                                                                                   	If dfa.ignoreCase Then
                                                                                   		s.[Set](AscW(Char.ToLower(ch)))
                                                                                   	Else
                                                                                   		s.[Set](AscW(ch))
                                                                                   	End If
                                                                                   Next .)
  | Char<n1>                                                                    (. s.[Set](n1) .)
    [ ".." Char<n2>                                                             (. For i As Integer = n1 + 1 To n2
                                                                                   	s.[Set](i)
                                                                                   Next .)
    ]
  | "ANY"                                                                       (. s = New CharSet()
                                                                                   s.Fill() .)
  )
  .

/*----------------------------------------------------------------------------*/

  Char<ByRef n As Integer>
  =
    char                                                                        (. Dim name As String = t.val
                                                                                   n = 0
                                                                                   name = tab.Unescape(name.Substring(1, name.Length - 2))
                                                                                   If name.Length = 1 Then
                                                                                   	n = AscW(name(0))
                                                                                   Else
                                                                                   	SemErr("unacceptable character value")
                                                                                   End If
                                                                                   If dfa.ignoreCase AndAlso n >= AscW("A"C) AndAlso n <= AscW("Z"C) Then
                                                                                   	n += 32
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  TokenDecl<ByVal typ As Integer>                                               (. Dim name As String = Nothing
                                                                                   Dim kind As Integer
                                                                                   Dim _sym As Symbol
                                                                                   Dim g    As Graph  = Nothing .)
  =
    Sym<name, kind>                                                             (. _sym = tab.FindSym(name)
                                                                                   If _sym IsNot Nothing Then
                                                                                   	SemErr("name declared twice")
                                                                                   Else
                                                                                   	_sym = tab.NewSym(typ, name, t.line)
                                                                                   	_sym.tokenKind = Symbol.fixedToken
                                                                                   End If
                                                                                   tokenString = Nothing .)
    SYNC
    ( '=' TokenExpr<g> '.'                                                      (. If kind = str Then
                                                                                   	SemErr("a literal must not be declared with a structure")
                                                                                   End If
                                                                                   tab.Finish(g)
                                                                                   If tokenString Is Nothing OrElse tokenString.Equals(noString) Then
                                                                                   	dfa.ConvertToStates(g.l, _sym)
                                                                                   Else
                                                                                   	' TokenExpr is a single string
                                                                                   	If tab.literals(tokenString) IsNot Nothing Then
                                                                                   		SemErr("token string declared twice")
                                                                                   	End If
                                                                                   	tab.literals(tokenString) = _sym
                                                                                   	dfa.MatchLiteral(tokenString, _sym)
                                                                                   End If .)
    |                                                                           (. If kind = id Then
                                                                                   	genScanner = False
                                                                                   Else
                                                                                   	dfa.MatchLiteral(_sym.name, _sym)
                                                                                   End If .)
    )
    [ SemText<_sym.semPos>                                                      (. If typ <> Node.pr Then
                                                                                   	SemErr("semantic action not allowed here")
                                                                                   End If .)
    ]
  .

/*----------------------------------------------------------------------------*/

  AttrDecl<ByVal sym As Symbol>
  =
    '<'                                                                         (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    { ANY
    | badString                                                                 (. SemErr("bad string in attributes") .)
    }
    '>'                                                                         (. If t.pos > beg Then
                                                                                   	sym.attrPos = New Position(beg, t.pos, col, line)
                                                                                   End If .)
  | "<."                                                                        (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    { ANY
    | badString                                                                 (. SemErr("bad string in attributes") .)
    }
    ".>"                                                                        (. If t.pos > beg Then
                                                                                   	sym.attrPos = New Position(beg, t.pos, col, line)
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  Expression<ByRef g As Graph>                                                  (. Dim g2 As Graph = Nothing .)
  =
    Term<g>                                                                     (. Dim first As Boolean = True .)
    { WEAK '|'
      Term<g2>                                                                  (. If first Then
                                                                                   	tab.MakeFirstAlt(g)
                                                                                   	first = False
                                                                                   End If
                                                                                   tab.MakeAlternative(g, g2) .)
    }
  .

/*----------------------------------------------------------------------------*/

  Term<ByRef g As Graph>                                                        (. Dim g2 As Graph = Nothing
                                                                                   Dim rslv As Node = Nothing
                                                                                   g = Nothing .)
  =
  ( [                                                                           (. rslv = tab.NewNode(Node.rslv, DirectCast(Nothing, Symbol), la.line) .)
      Resolver<rslv.pos>                                                        (. g = New Graph(rslv) .)
    ]
    Factor<g2>                                                                  (. If rslv IsNot Nothing Then
                                                                                   	tab.MakeSequence(g, g2)
                                                                                   Else
                                                                                   	g = g2
                                                                                   End If .)
    { Factor<g2>                                                                (. tab.MakeSequence(g, g2) .)
    }
  |                                                                             (. g = New Graph(tab.NewNode(Node.eps, DirectCast(Nothing, Symbol), 0)) .)
  )                                                                             (. If g Is Nothing Then
                                                                                   	g = New Graph(tab.NewNode(Node.eps, DirectCast(Nothing, Symbol), 0)) ' invalid start of Term
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  Factor<ByRef g As Graph>                                                      (. Dim name As String = Nothing
                                                                                   Dim kind As Integer
                                                                                   Dim pos As Position = Nothing
                                                                                   Dim weak As Boolean = False
                                                                                   g = Nothing .)
  =
  ( [ "WEAK"                                                                    (. weak = True .)
    ]
    Sym<name, kind>                                                             (. Dim _sym As Symbol = tab.FindSym(name)
                                                                                   If _sym Is Nothing AndAlso kind = str Then
                                                                                   	_sym = TryCast(tab.literals(name), Symbol)
                                                                                   End If
                                                                                   Dim undef As Boolean = _sym Is Nothing
                                                                                   If undef Then
                                                                                   	If kind = id Then
                                                                                   		_sym = tab.NewSym(Node.nt, name, 0)
                                                                                   	ElseIf genScanner Then
                                                                                   		' forward nt
                                                                                   		_sym = tab.NewSym(Node.t, name, t.line)
                                                                                   		dfa.MatchLiteral(_sym.name, _sym)
                                                                                   	Else
                                                                                   		' undefined string in production
                                                                                   		SemErr("undefined string in production") ' dummy
                                                                                   		_sym = tab.eofSy
                                                                                   	End If
                                                                                   End If
                                                                                   Dim typ As Integer = _sym.typ
                                                                                   If typ <> Node.t AndAlso typ <> Node.nt Then
                                                                                   	SemErr("this symbol kind is not allowed in a production")
                                                                                   End If
                                                                                   If weak Then
                                                                                   	If typ = Node.t Then
                                                                                   		typ = Node.wt
                                                                                   	Else
                                                                                   		SemErr("only terminals may be weak")
                                                                                   	End If
                                                                                   End If
                                                                                   Dim p As Node = tab.NewNode(typ, _sym, t.line)
                                                                                   g = New Graph(p) .)
    [ Attribs<p>                                                                (. If kind <> id Then
                                                                                   	SemErr("a literal must not have attributes")
                                                                                   End If .)
    ]                                                                           (. If undef Then
                                                                                   	_sym.attrPos = p.pos
                                                                                   ElseIf (p.pos Is Nothing) <> (_sym.attrPos Is Nothing) Then
                                                                                   	SemErr("attribute mismatch between declaration and use of this symbol") ' dummy
                                                                                   End If .)
  | '(' Expression<g> ')'
  | '[' Expression<g> ']'                                                       (. tab.MakeOption(g) .)
  | '{' Expression<g> '}'                                                       (. tab.MakeIteration(g) .)
  | SemText<pos>                                                                (. Dim p As Node = tab.NewNode(Node.sem, DirectCast(Nothing, Symbol), 0)
                                                                                   p.pos = pos
                                                                                   g = New Graph(p) .)
  | "ANY"                                                                       (. Dim p As Node = tab.NewNode(Node.any, DirectCast(Nothing, Symbol), 0) ' p.set is set in tab.SetupAnys
                                                                                   g = New Graph(p) .)
  | "SYNC"                                                                      (. Dim p As Node = tab.NewNode(Node.sync, DirectCast(Nothing, Symbol), 0)
                                                                                   g = New Graph(p) .)
  )                                                                             (. If g Is Nothing Then
                                                                                   	g = New Graph(tab.NewNode(Node.eps, DirectCast(Nothing, Symbol), 0)) ' invalid start of Factor
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  Resolver<ByRef pos As Position>
  =
    "IF" "("                                                                    (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    Condition                                                                   (. pos = New Position(beg, t.pos, col, line) .)
  .

/*----------------------------------------------------------------------------*/

  Condition = { "(" Condition | ANY } ")" .

/*----------------------------------------------------------------------------*/

  TokenExpr<ByRef g As Graph>                                                   (. Dim g2 As Graph = Nothing .)
  =
    TokenTerm<g>                                                                (. Dim first As Boolean = True .)
    { WEAK '|'
      TokenTerm<g2>                                                             (. If first Then
                                                                                   	tab.MakeFirstAlt(g)
                                                                                   	first = False
                                                                                   End If
                                                                                   tab.MakeAlternative(g, g2) .)
    }
  .

/*----------------------------------------------------------------------------*/

  TokenTerm<ByRef g As Graph>                                                   (. Dim g2 As Graph = Nothing .)
  =
    TokenFactor<g>
    { TokenFactor<g2>                                                           (. tab.MakeSequence(g, g2) .)
    }
    [ "CONTEXT"
      '(' TokenExpr<g2>                                                         (. tab.SetContextTrans(g2.l)
                                                                                   dfa.hasCtxMoves = True
                                                                                   tab.MakeSequence(g, g2) .)
      ')'
    ]
  .

/*----------------------------------------------------------------------------*/

  TokenFactor<ByRef g As Graph>                                                 (. Dim name As String = Nothing
                                                                                   Dim kind As Integer .)
  =
                                                                                (. g = Nothing .)
  ( Sym<name, kind>                                                             (. If kind = id Then
                                                                                   	Dim c As CharClass = tab.FindCharClass(name)
                                                                                   	If c Is Nothing Then
                                                                                   		SemErr("undefined name")
                                                                                   		c = tab.NewCharClass(name, New CharSet())
                                                                                   	End If
                                                                                   	Dim p As Node = tab.NewNode(Node.clas, DirectCast(Nothing, Symbol), 0)
                                                                                   	p.val = c.n
                                                                                   	g = New Graph(p)
                                                                                   	tokenString = noString
                                                                                   Else
                                                                                   	' str
                                                                                   	g = tab.StrToGraph(name)
                                                                                   	If tokenString Is Nothing Then
                                                                                   		tokenString = name
                                                                                   	Else
                                                                                   		tokenString = noString
                                                                                   	End If
                                                                                   End If .)
  | '(' TokenExpr<g> ')'
  | '[' TokenExpr<g> ']'                                                        (. tab.MakeOption(g)
                                                                                   tokenString = noString .)
  | '{' TokenExpr<g> '}'                                                        (. tab.MakeIteration(g)
                                                                                   tokenString = noString .)
  )                                                                             (. If g Is Nothing Then
                                                                                   	g = New Graph(tab.NewNode(Node.eps, DirectCast(Nothing, Symbol), 0)) ' invalid start of TokenFactor
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  Sym<ByRef name As String, ByRef kind As Integer>
  =                                                                             (. name = "???"
                                                                                   kind = id .)
  ( ident                                                                       (. kind = id
                                                                                   name = t.val .)
  | (string                                                                     (. name = t.val .)
    | char                                                                      (. name = """" & t.val.Substring(1, t.val.Length - 2) & """" .)
    )                                                                           (. kind = str
                                                                                   If dfa.ignoreCase Then
                                                                                   	name = name.ToLower()
                                                                                   End If
                                                                                   If name.IndexOf(" "C) >= 0 Then
                                                                                   	SemErr("literal tokens must not contain blanks")
                                                                                   End If .)
  )
  .

/*----------------------------------------------------------------------------*/

  Attribs<ByVal p As Node>
  =
    '<'                                                                         (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    { ANY
    | badString                                                                 (. SemErr("bad string in attributes") .)
    }
    '>'                                                                         (. If t.pos > beg Then
                                                                                   	p.pos = New Position(beg, t.pos, col, line)
                                                                                   End If .)
  | "<."                                                                        (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    { ANY
    | badString                                                                 (. SemErr("bad string in attributes") .)
    }
    ".>"                                                                        (. If t.pos > beg Then
                                                                                   	p.pos = New Position(beg, t.pos, col, line )
                                                                                   End If .)
  .

/*----------------------------------------------------------------------------*/

  SemText<ByRef pos As Position>
  =
    "(."                                                                        (. Dim beg  As Integer = la.pos
                                                                                   Dim col  As Integer = la.col
                                                                                   Dim line As Integer = la.line .)
    { ANY
    | badString                                                                 (. SemErr("bad string in semantic action") .)
    | "(."                                                                      (. SemErr("missing end of previous semantic action") .)
    }
    ".)"                                                                        (. pos = New Position(beg, t.pos, col, line) .)
  .

/*----------------------------------------------------------------------------*/

END Coco .
